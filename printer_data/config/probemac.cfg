[gcode_macro Offset_block_test]
gcode:
    {% set macro = printer["gcode_macro HOME_Z_AND_PROBE_WITH_OFFSET"] %}
    {% set initial_z = macro.initial_z|default(10.0)|float %}  ; Default initial Z height
    {% set probe_travel_speed = printer.configfile.config["probe"]["z_speed"]|default(5.0)|float %}
    {% set lift_speed = printer.configfile.config["printer"]["max_z_velocity"]|default(50.0)|float %}

    ; Save the current z_offset
    {% set saved_z_offset = printer.configfile.config["probe"]["z_offset"]|float %}

    ; Temporarily set z_offset to 0
    SET_KINEMATIC_POSITION Z=0
    SET_PROBE Z_OFFSET=0

    ; Home Z
    G28 Z
    G90 ; Absolute positioning
    G0 Z20 F{lift_speed*60} ; Move to initial Z height

    ; Display input screen
    _DISPLAY_INPUT_NUMBER TITLE="Z test block" MESSAGE="Enter Z test block height:" MIN=0 MAX=50 DEFAULT=0 SAVE_VARIABLE="user_z_offset"

    ; Wait for user input (blocking until accept/cancel)
    _WAIT_FOR_INPUT

    ; Check if input was cancelled
    {% if printer.display_data.input_result == "CANCELLED" %}
        M118 User cancelled Z offset input.
        M117 User cancelled Z offset input. ; For some displays
        M0 User cancelled Z offset input. ; For some displays
    {% else %}
        ; Get the user input value
        {% set user_offset = printer.display_data.input_value|float %}

        ; Probe the bed
        G30

        ; Get the probe Z result (now with 0 offset)
        {% set probe_z = printer.probe_z_offset.value|float %}

        ; Calculate the difference (not offset)
        {% set z_difference = user_offset - probe_z %}

        M118 User entered Z offset: {user_offset}
        M118 Probe Z result (with 0 offset): {probe_z}
        M118 Z Difference (User - Probe): {z_difference}
        M117 Z Difference (User - Probe): {z_difference} ; For some displays
        M0 Z Difference (User - Probe): {z_difference} ; For some displays

        ; Optionally move the Z to the calculated difference.
        ; Uncomment the following line if you want to move the Z axis.
        ; G0 Z{z_difference} F{lift_speed*60}

    {% endif %}

    ; Restore the original z_offset
    SET_PROBE Z_OFFSET={saved_z_offset}
    G4 P500 ; small delay

[gcode_macro _DISPLAY_INPUT_NUMBER] ; Helper macro for input
gcode:
    {% set title = params.TITLE|default("Input") %}
    {% set message = params.MESSAGE|default("Enter Value:") %}
    {% set min = params.MIN|default(-100)|float %}
    {% set max = params.MAX|default(100)|float %}
    {% set default = params.DEFAULT|default(0)|float %}
    {% set save_variable = params.SAVE_VARIABLE|default("input_value") %}

   # {% if printer.display_data is undefined %}
   #     {% printer.add_object("display_data", {}) %}
   # {% endif %}

   # {% do printer.display_data.update({ "input_title": title, "input_message": message, "input_min": min, "input_max": max, "input_default": default, "input_result": "PENDING", "input_value": default }) %}

    ; Display the input screen (implementation depends on your display)
    ; Example using a simple M118 message (replace with your display's commands)
    M118 {title}
    M118 {message}
    M118 Use the control knob to set the value. Press the button to accept or long press to cancel.

[gcode_macro _WAIT_FOR_INPUT] ; Helper macro for waiting
gcode:
    ; Wait for the user to interact with the display (replace with your display's logic)
    ; This is a very basic example - you'll need to adapt it to your display
    ; For example, you might monitor a status variable set by your display's input handling
    ; The following is a placeholder that will pause indefinitely until manually resumed
    ;M0 Wait for user input. ; Use this if your display doesn't have a blocking input method.
    ; The better option is to implement proper blocking within your display's configuration.
    {% if printer.display_data.input_result != "PENDING" %}
    {% else %}
        PAUSE
    {% endif %}